using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Text;
using System.Windows.Forms;

namespace PuzzlePreview
{
    public partial class MainForm : Form
    {
        // 70 bytes between puzzles
        // 200 puzzles per size
        // 14,000 bytes between puzzle sizes
        private byte[] allPuzzleData;
        private byte[] currentPuzzleData;
        private int[] currentTrns;
        private int thisPuzzleSizeOffset;
        private int seed;
        private Bitmap puzzleImage;
        private int puzWidth;
        private int puzHeight;
        private int curPuzzleNumber;
        private bool isFlippedPuzzle;
        private Font textFont;

        private const int cubeWidth = 40;
        private const int cubeHeight = 40;

        public MainForm()
        {
            InitializeComponent();
            allPuzzleData = File.ReadAllBytes(@"..\..\..\KurushRNG\IQ-GROUP.NEW");
            seed = puzWidth = puzHeight = 0;
            thisPuzzleSizeOffset = 0;
            curPuzzleNumber = 200;
            puzzleImage = null;
            currentPuzzleData = null;
            currentTrns = null;
            textFont = new Font(FontFamily.GenericSansSerif, 16.0f);
        }

        private int g_randSeed = 0;

        private void SRand(int seed)
        {
            g_randSeed = seed;
        }

        private int GetSRand()
        {
            return g_randSeed;
        }

        private int Rand()
        {
            int s = seed;
            long mul = s * 0x41C64E6D;
            int loRes = (int)(mul & 0xFFFFFFFF);
            loRes += 0x3039;
            int shRes = loRes >> 16;
            seed = loRes;
            return shRes & 0x7FFF;
        }

        private int GetNextPuzzlePattern(out bool isFlipped)
        {
            int r = Rand();
            int rDiv20 = r / 200;
            int rShift31 = r >> 31;
            int nextVal = rDiv20 - rShift31;
            nextVal *= 200;
            nextVal = r - nextVal;
            int currentPuzzle = nextVal & 0xff;
            isFlipped = ((Rand() % 100) < 30);
            return currentPuzzle;
        }

        private void nextPuzzleBut_Click(object sender, EventArgs e)
        {
            if(seed == 0)
            {
                MessageBox.Show("Random seed has not been set");
                return;
            }
            SRand(seed);
            curPuzzleNumber = GetNextPuzzlePattern(out isFlippedPuzzle);
            flippedCheck.Checked = isFlippedPuzzle;
            puzzleNumBox.Text = curPuzzleNumber.ToString();
            initialSeedTextBox.Text = GetSRand().ToString();
            RedrawPuzzleAndUpdateTRN();
        }

        private void resetButton_Click(object sender, EventArgs e)
        {
            stepCountUpDown.Value = 1;
            RedrawPuzzleAndUpdateTRN();
        }

        private void initialSeedTextBox_TextChanged(object sender, EventArgs e)
        {
            string seedText = initialSeedTextBox.Text;
            Int32.TryParse(seedText, out seed);
            nextPuzzleBut.Enabled = !String.IsNullOrEmpty(seedText);
        }

        private void puzzleNumBox_ValueChanged(object sender, EventArgs e)
        {
            int puzzle = (int)puzzleNumBox.Value;
            curPuzzleNumber = puzzle - 1;
            flippedCheck.Checked = isFlippedPuzzle = false;
            stepCountUpDown.Value = 1;
            RedrawPuzzleAndUpdateTRN();
        }

        private void RedrawPuzzleAndUpdateTRN()
        {
            if(IsEverythingSet())
            {
                int trn = currentTrns[curPuzzleNumber];
                trnTextBox.Text = trn.ToString();
                stepCountUpDown.Maximum = trn;
                currentPuzzleData = CopyPuzzle(allPuzzleData, thisPuzzleSizeOffset + (curPuzzleNumber * 70), puzWidth, puzHeight, isFlippedPuzzle);
                puzzleImageBox.Image = null;
                if (puzzleImage != null)
                {
                    puzzleImage.Dispose();
                }
                puzzleImage = DrawPuzzleDiagram();
                puzzleImageBox.Image = puzzleImage;
            }
        }

        private void puzzleSizes_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (puzzleSizes.SelectedItem != null)
            {
                string size = (string)puzzleSizes.SelectedItem;
                string[] dims = size.Split('x');
                puzWidth = Int32.Parse(dims[0]);
                puzHeight = Int32.Parse(dims[1]);
                currentTrns = TRNs.g_allTrns[puzzleSizes.SelectedIndex];
                thisPuzzleSizeOffset = puzzleSizes.SelectedIndex * (70 * 200);
                stepCountUpDown.Value = 1;
                RedrawPuzzleAndUpdateTRN();
            }
        }

        private bool IsEverythingSet()
        {
            return (puzWidth > 0) && (puzHeight > 0) && (curPuzzleNumber < 200);
        }

        static private byte[] CopyPuzzle(byte[] puzzles, int startingPoint, int width, int height, bool flipped)
        {
            byte[] puzzle = new byte[width * height];
            for (int y = 0; y < height; ++y)
            {
                Array.Copy(puzzles, startingPoint + (y * 7), puzzle, y * width, width);
                if (flipped)
                {
                    Array.Reverse(puzzle, y * width, width);
                }
            }
            return puzzle;
        }

        private void puzzleImageBox_Click(object sender, MouseEventArgs e)
        {
            if (puzzleImage != null)
            {
                DrawCapture(e.Location, e.Button);
                puzzleImageBox.Refresh();
            }
        }

        private void flippedCheck_Click(object sender, EventArgs e)
        {
            isFlippedPuzzle = flippedCheck.Checked;
            stepCountUpDown.Value = 1;
            RedrawPuzzleAndUpdateTRN();
        }

        private Bitmap DrawPuzzleDiagram()
        {
            Brush[] qubeBrushes = {Brushes.BurlyWood, Brushes.Green, Brushes.Black};
            Bitmap bm = new Bitmap(puzWidth * cubeWidth, puzHeight * cubeHeight, System.Drawing.Imaging.PixelFormat.Format16bppRgb555);
            Pen blackPen = Pens.Black;
            using(Graphics g = Graphics.FromImage(bm))
            {
                g.Clear(Color.Gray);
                int yLoc = 0;
                for (int y = 0; y < puzHeight; ++y)
                {
                    int xLoc = 0;
                    for (int x = 0; x < puzWidth; ++x)
                    {
                        byte qube = currentPuzzleData[(y * puzWidth) + x];
                        Brush b = qubeBrushes[qube];
                        Rectangle r = new Rectangle(xLoc, yLoc, cubeWidth, cubeHeight);
                        g.FillRectangle(b, r);
                        g.DrawRectangle(blackPen, r);
                        xLoc += cubeWidth;
                    }
                    yLoc += cubeHeight;
                }
            }
            return bm;
        }

        private void DrawCapture(Point mouseClick, MouseButtons mb)
        {
            DrawSingleCapture(mouseClick);
            if (bombCheck.Checked || ((mb & MouseButtons.Right) != 0))
            {
                int ptX = mouseClick.X, ptY = mouseClick.Y;
                for (int i = -1; i < 2; ++i)
                {
                    int newX = (ptX + (i * cubeWidth));
                    for (int j = -1; j < 2; ++j)
                    {
                        // already drawn the middle one
                        if ((i == 0) && (j == 0))
                        {
                            continue;
                        }
                        int newY = (ptY + (j * cubeHeight));
                        DrawSingleCapture(new Point(newX, newY));
                    }
                }
            }
        }

        private void DrawSingleCapture(Point mouseClick)
        {
            int x = mouseClick.X;
            int y = mouseClick.Y;
            // ignore those that are outside of the bounds of the puzzle
            if((x < 0) || (y < 0) || (x > (puzWidth * cubeWidth)) || (y > (puzHeight * cubeHeight)))
            {
                return;
            }
            string moveNumber = stepCountUpDown.Value.ToString();
            using (Graphics g = Graphics.FromImage(puzzleImage))
            {
                int boxXLoc = (x / cubeWidth) * cubeWidth;
                int boxYLoc = (y / cubeHeight) * cubeHeight;
                Rectangle r = new Rectangle(boxXLoc, boxYLoc, cubeWidth, cubeHeight);
                g.FillRectangle(Brushes.Gray, r);
                int xCellPos = (moveNumber.Length > 1) ? 5 : 10;
                g.DrawString(moveNumber, textFont, Brushes.Black, new PointF(boxXLoc + xCellPos, boxYLoc + 10));
            }
        }

        private void puzzleImageBox_Resize(object sender, EventArgs e)
        {
            Size clientSize = this.ClientSize;
            int boxBottom = puzzleImageBox.Bottom;
            int curWinHeight = clientSize.Height;
            if (boxBottom > curWinHeight)
            {
                this.Height += (boxBottom - curWinHeight);
            }
            int boxWidth = puzzleImageBox.Right;
            int curWinWidth = clientSize.Width;
            if (boxWidth > curWinWidth)
            {
                this.Width += (boxWidth - curWinWidth);
            }

        }
    }

#region TRNs
    static class TRNs
    {
        public static int[] g_4x2TRNs = new int[] {4,3,2,2,2,3,2,2,2,2,2,2,2,3,2,2,4,2,2,2,3,2,1,2,1,1,3,
            2,5,5,2,1,4,2,1,1,3,2,2,2,1,3,4,2,1,1,8,1,1,2,3,3,3,3,3,1,1,1,2,2,3,3,1,2,3,1,2,2,1,1,
            1,2,3,1,1,2,1,1,2,4,1,3,1,3,5,1,1,2,1,1,1,1,2,3,5,4,2,1,3,3,4,2,5,5,1,1,1,3,3,2,1,2,2,
            3,1,2,2,2,3,2,4,2,2,1,1,3,1,2,1,4,2,3,1,5,3,2,2,1,3,1,1,2,2,2,3,1,2,1,1,4,1,3,1,2,1,3,
            2,1,1,2,1,2,1,2,2,3,2,5,2,2,2,1,2,2,3,2,4,3,3,1,5,1,3,2,1,1,1,2,1,2,1,1,3,1,2,2,1,3,2,3};
        public static int[] g_4x3TRNs = new int[] {3,3,3,2,1,2,3,3,3,4,3,2,3,1,3,5,3,5,5,2,1,4,2,5,1,2,2,
            5,4,4,2,3,3,3,3,5,1,3,1,2,2,2,3,2,2,3,1,4,1,2,2,2,4,3,3,3,6,3,2,3,4,1,3,3,6,6,3,3,3,5,
            2,3,2,2,2,1,6,2,2,3,2,4,3,4,5,2,3,3,3,3,2,4,3,3,3,2,3,2,2,4,3,5,6,2,2,3,3,4,2,3,4,2,3,
            4,2,4,2,5,2,1,2,3,3,4,3,2,1,2,2,1,2,3,2,5,4,4,1,3,2,2,2,2,2,1,1,1,3,3,3,2,4,4,3,3,2,5,
            4,3,2,2,4,3,3,2,4,6,2,3,4,4,5,4,2,3,2,2,3,2,4,2,3,2,1,4,3,2,2,3,3,3,2,2,2,2,3,1,2,2,4,2};
        public static int[] g_4x4TRNs = new int[] {1,4,2,2,3,5,1,4,5,5,3,7,3,2,4,3,3,2,3,2,4,4,4,3,3,3,3,
            5,6,3,4,3,3,4,3,3,5,4,3,5,4,5,3,3,2,4,6,4,3,3,3,3,1,2,5,4,3,2,3,4,3,4,4,4,4,3,4,4,3,3,
            3,4,5,3,5,3,5,4,2,3,3,3,4,4,4,3,5,3,2,2,2,3,5,2,3,3,3,2,4,4,5,2,2,3,3,3,3,2,4,2,5,3,4,
            2,2,2,3,2,3,4,4,5,2,3,2,3,2,6,4,2,2,3,2,4,3,3,2,5,2,4,4,3,4,6,4,2,2,5,2,2,3,3,3,3,3,3,
            3,3,6,5,4,2,4,3,2,3,2,2,3,2,5,5,4,2,4,3,5,2,4,2,6,3,4,8,6,5,3,3,2,2,2,5,4,6,4,2,3,4,8,3};
        public static int[] g_4x5TRNs = new int[] {5,4,6,4,6,4,7,6,7,7,5,6,5,5,6,8,5,5,6,3,6,5,7,5,5,4,5,
            6,5,4,5,6,5,4,4,6,5,6,4,3,4,6,8,5,6,4,5,4,8,4,3,7,6,6,6,6,6,6,6,5,7,5,6,4,5,6,4,6,5,5,
            5,3,6,5,4,7,6,7,7,7,8,7,7,6,5,6,5,3,4,7,7,4,5,5,6,6,4,6,6,6,5,6,5,8,6,6,6,3,6,8,5,7,5,
            5,5,6,5,7,6,5,6,6,4,7,6,4,5,4,6,8,6,5,5,8,7,8,4,6,5,4,7,5,5,5,5,4,6,5,5,4,5,7,5,6,6,3,
            4,4,7,6,8,4,5,6,4,5,4,3,4,6,4,5,4,5,5,6,5,4,6,4,7,6,5,5,5,4,4,5,5,7,5,5,7,7,5,5,4,4,5,5};
        public static int[] g_4x6TRNs = new int[] {6,7,8,5,9,5,4,3,5,6,7,8,7,4,7,6,4,7,7,7,6,7,8,9,5,0xA,7,
            8,6,0xA,6,7,5,0xA,7,9,9,8,6,7,8,8,6,5,9,8,9,0xA,0xD,0xC,8,5,9,8,0xA,7,7,0xA,8,7,9,7,7,0xA,
            6,0xA,7,8,6,6,8,6,7,6,5,0xA,8,6,8,6,7,9,9,8,6,7,9,8,9,4,5,6,0xC,7,8,7,0xA,7,7,7,8,4,8,5,8,
            7,0xB,9,8,7,7,6,5,7,6,6,9,6,7,6,6,6,9,9,9,7,5,5,7,7,8,9,0xB,7,5,8,8,7,5,4,7,7,8,8,6,9,9,8,
            0xC,0xB,7,9,0xA,0xA,0xA,7,5,8,8,7,7,7,8,0xA,0xA,9,0xB,8,0xA,8,7,8,7,7,8,8,7,9,8,9,7,5,6,8,
            7,6,8,8,9,0xA,7,7,8,5,0xB,6,5,7,8,7};
        public static int[] g_5x4TRNs = new int[] {3,4,5,7,4,7,7,6,6,4,7,6,7,6,7,7,6,6,5,8,7,7,7,6,6,6,4,8,
            6,6,7,5,7,7,6,6,7,6,8,6,6,5,5,0xB,7,8,0xB,6,7,8,6,6,7,6,5,6,6,8,7,5,8,7,4,5,5,6,9,5,6,6,
            5,8,9,8,3,9,7,8,5,0xA,5,8,7,8,8,7,0xA,7,8,8,7,5,8,5,7,6,6,7,4,5,6,4,7,4,7,9,5,6,5,6,4,4,
            8,6,7,6,7,0xA,7,4,7,4,8,7,7,7,4,0xA,7,5,3,7,4,5,8,5,4,8,6,5,4,5,6,8,6,4,6,7,4,5,6,4,7,4,
            6,6,9,6,6,7,6,7,9,4,7,7,7,5,4,5,6,0xA,9,7,7,9,5,5,4,5,7,9,5,9,0xF,7,5,7,9,7,5,7,6,5,7,5,
            7,6,4,5};
        public static int[] g_5x5TRNs = new int[] {1,0xC,8,7,9,8,4,0xA,6,6,6,6,0xE,5,8,7,5,6,5,0xB,5,9,8,7,
            7,9,6,7,4,6,4,8,9,5,9,7,9,9,6,0xB,7,5,5,5,7,6,7,9,6,9,5,7,7,6,8,7,7,8,9,8,8,8,9,8,7,6,6,
            7,0xB,0xB,8,7,0xA,6,0xB,6,7,7,0xA,7,7,0xA,0xB,8,7,5,0xA,8,6,7,4,6,7,6,6,6,8,9,8,7,8,6,6,
            0xC,5,0xB,0xA,8,0xB,6,8,7,0xA,9,8,9,8,8,9,5,9,0xB,8,9,6,0xA,0xB,0xA,7,8,4,6,0xC,8,8,9,7,
            9,8,8,0xB,8,5,6,9,8,0xA,0xA,9,0xA,0xA,7,8,9,8,5,0xA,7,4,0xA,5,7,0xC,9,3,0xA,7,4,3,7,7,8,
            0xA,6,8,5,9,5,6,6,8,8,5,7,6,4,7,6,8,3,4,7,5,5,6,4,6,4,4,4};
        public static int[] g_5x6TRNs = new int[] {1,8,9,5,7,7,7,6,8,8,8,0xA,8,7,6,9,6,6,5,8,9,7,9,6,6,8,5,
            6,5,5,8,6,8,0xA,5,8,5,8,9,7,9,5,7,6,8,6,7,7,6,9,8,0xA,0xA,7,9,0xA,8,7,7,7,0xA,6,9,8,4,7,
            5,5,9,7,5,7,5,6,9,5,8,7,8,7,6,0xA,8,8,9,8,7,9,8,5,6,6,0xC,9,7,6,8,7,7,9,8,8,7,9,8,6,7,7,
            0xA,9,9,6,6,6,8,8,7,6,8,6,9,8,8,0xA,9,9,5,8,7,5,0xA,0xB,0xA,7,7,6,7,5,0xA,7,9,4,0xA,8,6,
            8,8,7,8,6,8,9,7,9,8,8,7,7,9,0xB,7,8,7,9,7,8,7,9,8,8,6,8,8,9,8,8,7,0xA,8,9,7,6,0xA,0xB,8,
            8,0xB,0xA,6,7,7,9,0xA,8,7,5,7,7,7,7};
        public static int[] g_5x7TRNs = new int[] {1,0xA,0xD,0xB,0xC,0xD,0xB,0xB,8,0xA,0xA,0xB,0xB,8,0xB,6,
            9,9,9,6,6,7,0xA,9,8,7,8,8,0xB,0xA,5,0xD,0xB,8,0xA,0xC,8,0xA,7,8,6,5,6,7,0xD,8,6,8,9,7,0xA,
            6,8,0xA,0xB,7,7,0xB,0xB,0xA,6,8,0xB,0xB,0xB,9,9,9,7,9,8,0xE,9,0xC,0xB,0xA,0xB,8,9,9,8,0xB,
            9,0xE,0xA,0xE,0xF,0xA,9,7,8,8,0xA,8,0xA,7,5,9,0xA,0xB,0xA,0xC,0xC,0xE,0xC,8,7,8,0xC,5,0xA,
            0xE,0xA,0xB,9,0xB,0xC,0xB,0xB,0xF,0xA,9,0xD,0xB,0xD,0xC,0xC,0xA,0xD,0xA,0xA,0xA,0xB,0xD,0xD,
            0x10,0xB,0xC,0xE,7,9,0xE,9,8,0xB,0xA,0x12,0xB,8,0xB,9,0xC,0x10,0xA,0xA,0xE,0xB,0xA,0xB,0xA,
            0xA,0xC,0xB,0xB,0xA,0xB,7,0xA,0xB,0xB,9,0xE,0xE,8,0xD,0xA,0xC,0xB,0xA,0xC,8,0xA,0xA,7,4,0xC,
            0xC,0xA,0xB,0xD,8,0xA,9,0xA,0xB,0xC,0xC,9,0x11,0xC};
        public static int[] g_5x8TRNs = new int[] {1,0xB,0xB,0xD,9,0xB,7,0xC,0xB,0xA,9,0xC,7,0xA,0xB,0xB,0xA,0xB,
            0xA,9,0xD,7,8,0xA,0xA,0xA,8,9,0xF,8,9,0xA,0xA,0xA,0xB,0xB,0xB,7,7,0xA,0xB,0xC,0xD,0xE,0xA,9,0xA,
            0xC,0xC,0xE,0xC,0xB,0xE,7,0xB,8,6,9,6,9,0xC,0xD,6,0xB,0xA,0xB,0xB,7,7,0xD,0xD,0xB,0xB,7,0xA,0xA,
            0xB,8,7,0xD,0xC,0xA,0xA,7,8,0xC,9,9,9,9,0xC,0xA,9,8,0xC,8,0xD,0xB,0xC,0xA,8,0xB,0xD,0xD,9,0xE,0xA,
            9,0xE,0xD,0xE,0xB,0xB,0xC,0xA,0xB,0xB,0xA,7,9,0xA,0xC,0xD,0xA,0xA,0xA,0xC,0xB,0xD,0xA,0xE,0xE,0xD,
            0xC,0xA,0xC,8,9,0xA,0xE,7,0xB,0xB,0xC,0xD,8,0xC,0xD,0xA,0xC,0x11,0xA,0xA,0x12,0xC,0xD,9,0x11,0xD,
            0xD,0xA,0x11,0x12,0xC,0xB,0xC,0xB,0xC,0xA,0xB,0xB,0xD,0xA,0xA,0xE,0xB,0x12,0xD,0xD,9,0xD,0xD,0xA,
            0xB,8,0xE,9,0xB,0xE,0x10,0x11,0xB,7,7,0xB,9,0xC,8,9,0xA};
        public static int[] g_6x6TRNs = new int[] {0xB,0xA,8,8,0xB,8,0xA,0xA,0xA,8,8,9,6,7,0xB,7,9,9,8,0xE,6,0xA,0xA,
            0xB,8,0xA,8,6,0xA,9,6,5,5,7,0xB,0xA,0xA,0xA,7,0xD,0xA,0xB,0xA,0xA,9,0xD,6,9,0xB,0xA,8,8,9,6,8,9,
            0xC,9,0xA,0xB,0xB,9,9,5,9,9,9,8,0xB,8,8,0xA,9,0xA,0xB,0xE,7,0xD,8,0x10,7,7,0xC,8,8,9,9,8,0xF,0xD,
            0xB,0xA,9,8,7,8,9,0xC,0xA,0xD,0xB,0xC,0xB,0xB,0xC,0xA,0xC,7,5,8,0xB,0xB,9,0xE,0xA,0xC,8,0xB,9,0xC,
            6,0xD,0xC,0xD,8,7,0xB,0xA,9,7,9,0xD,9,0xA,0xD,0xE,0xC,0xB,7,8,0xA,0xD,0xC,0xD,9,7,0xA,8,9,6,8,8,8,
            0xB,0xC,9,7,9,7,6,0xC,9,8,6,0xA,0xB,9,9,0xB,0xC,0xD,0xB,0xC,8,0xD,0xC,0xA,0xB,0xA,0xB,0xE,8,7,8,0xE,
            0xD,0xA,0xD,0xA,0xD,6,0xA,9,0xC,0xC,0xF,0xE,0xA,0xC,0xD};
        public static int[] g_6x7TRNs = new int[] {0xD,0xF,9,0xA,0xA,9,9,0xB,7,0xC,9,0xA,0xD,0xA,0xC,7,9,0xD,0xE,0xD,9,
            0xC,8,0xC,9,9,9,0xB,0xC,9,0xC,0xC,0xA,0xE,0xB,0xC,0xB,0xB,0xA,6,8,9,0xA,0xB,0xF,0xB,0xE,0xE,0xA,7,0xD,
            0xC,9,0xA,0xD,0xA,0xD,9,7,0xB,0xD,9,0xB,0xA,0xB,8,9,0xA,6,9,0xA,9,7,8,0xA,9,8,9,8,0xB,9,0xE,0xA,8,9,
            0xA,0xE,0xE,7,0xA,0xB,0xB,0xB,0xB,0xC,0xA,0xA,0xB,0xD,9,8,0xB,0xC,0xC,0xE,0xB,0xB,0xA,0xD,0xC,9,0xC,
            0xB,0xE,8,9,0xD,9,9,8,9,8,8,0xE,0xE,7,8,8,7,9,0xE,0xC,9,0xA,6,0xD,0xB,9,0xE,0xB,0xA,0xB,0xA,0xA,0xC,
            0xD,0xB,0xC,0xE,9,0xA,9,9,0xB,8,0xB,0xC,0xE,0xA,9,0xB,9,0xA,0xD,0xA,0xE,0xB,0xB,0xA,0xA,0xC,0xA,9,0xE,
            0xA,8,9,0xA,0xC,0xB,0xB,9,6,0xC,9,0xE,0xB,0xB,0xA,0xC,0xE,0x11,0xA,9,0xD,0xA,0xA,0xF,0x11,0xD};
        public static int[] g_6x8TRNs = new int[] {0xB,0xC,0xD,0xA,0xA,0xC,0xD,0xC,0xF,0xC,0xE,0xB,0xC,0xA,0x12,0xE,6,0xB,
            0x11,0x11,0x11,0xD,0xE,0xE,0x13,0xF,0xD,0x12,0xA,0x11,3,0xA,0xC,0xF,9,0xC,0xC,0xA,0xF,0xC,0xD,0xB,0xF,
            0xB,0xE,0xC,9,9,0xC,8,8,8,7,0xA,0xB,0xA,9,0xA,0xD,0xF,0xC,0xB,0xC,0xF,0xD,0x14,0xE,0xD,0x14,0xF,0x13,
            0xC,0xB,0xD,0xA,0xA,0xB,0x10,0x10,0xC,0xC,0x12,0xA,0xB,0xC,0xF,0xC,0x10,0xD,0xD,0xF,0xE,0xB,0x10,0x14,
            0x10,0xE,0xE,0x10,0xD,0xE,0xD,0xA,0xC,0xE,0x10,0xA,0xB,0xD,0xF,0xD,0xD,0xF,0xC,0x12,0xF,0xC,0xC,0xF,0xD,
            0xF,0xA,8,0xC,0x11,0xE,0x11,0xE,0xE,0x10,0xE,0xE,0x13,0xE,0xF,0x14,0xC,0xB,0xB,0xD,0xE,0xE,0xB,9,0xE,
            0xC,0xE,0x10,0xE,0xF,0x10,0xB,0x10,0xB,0xD,0xD,0x10,0xD,0xB,0x11,0xD,0xD,9,0xF,0xB,0xC,9,0xD,0xF,0xD,
            0x10,0xD,0xD,9,0xF,0xE,0x11,0xA,0x12,0xF,0x10,0xE,0x10,0xE,0x10,0xE,0xE,0xE,0xE,0xC,0x10,0xF,0xD,0x15,
            0x14,0xF,9,0x11,0x12,0xD};
        public static int[] g_6x9TRNs = new int[] {0xD,9,0xD,0xB,0x10,0xD,0xE,0xC,0xA,0xA,0xB,0xA,0xC,0xB,0xD,0xC,0xC,0xB,
            0xD,0xD,0xA,0xC,0xC,0x12,0xA,0xB,0xE,0xA,8,0xF,0xF,0xB,0x11,8,0xD,0xA,0xD,0xC,0x11,0xD,0xA,0xA,0x10,0x11
            ,0xA,0xA,0xA,0xD,0xB,0xE,8,0x10,0xD,0x11,0x10,0xC,0xC,0xB,0xC,0xF,0x10,0x10,0xE,0xC,0xC,0xB,0xB,0xB,0xE,
            0xE,0xA,0xF,9,0xD,0xA,0xF,0xF,0xF,0xE,0xB,0xA,7,0xC,0xB,0xF,0xE,0xD,0x11,0xE,0x10,0xF,0xD,0xD,0x10,0xF,
            0x10,0x13,0xE,9,0xB,0xA,9,0xE,0xC,0xA,0xF,0x11,0xF,0xA,0xE,0x10,0x11,0x12,0xC,0xD,0xC,0xB,0xB,0xC,0x14,
            0x13,9,0xD,0x10,0xA,7,9,0xC,0xF,7,8,0x11,0xC,0x13,0xB,0xB,0xC,0xD,0xC,0x13,0x11,0xD,0x12,0xD,0xF,8,0xD,
            0xE,0xB,0xC,0x10,0x12,0x15,0xC,0xD,0xF,0xD,0xA,0x11,0xE,0x11,0xC,0x10,0xD,0xD,0xD,0xB,0xB,0xD,0x11,0xD,
            0xD,0xB,0xD,0xD,0x10,0xD,0x10,0xC,0xC,0xE,0xA,0xD,0x12,0xF,8,0xD,0xE,0xB,0xD,0x12,0x11,0xA,0xC,0xF,0x11,
            0xC,0x15,0xD,0xC};
        public static int[] g_7x7TRNs = new int[] {0x10,0xA,6,0xC,0xC,0xE,0xB,0xB,0xA,0xD,0xE,0xB,0xD,0xB,0xC,0xC,0xD,9,0xA,
            0xB,0xC,0xC,8,0xD,8,8,0xA,3,0xA,0xE,9,0xB,0xC,0xD,0xA,0xE,8,0xB,0xF,0xC,0xA,9,0xE,0xB,0xB,0xF,0xD,7,0xD,
            0xC,0xC,0xC,0xF,0xE,0xC,0xC,9,0xE,0xA,9,0xA,0xC,0xE,0xD,0xF,0xC,0xD,0xC,0xE,0xD,0xB,0xD,0xB,0xD,0xD,0xD,
            9,0xD,0xB,0xE,0xC,0xA,0xD,0xA,0xD,0xC,0xF,0xA,0xB,0xC,0x10,0xB,8,0xB,0xC,0xB,0xA,0xE,0xE,0xD,0xE,0xE,0xC,
            0xD,0xB,0xF,0xC,0xF,0xE,0xC,0xB,0xB,0xD,0xA,0xB,0x10,0xD,0xF,0xC,0xD,0x10,0xE,0xD,0xD,6,0xF,0xE,0xD,0xC,
            0xC,0xD,0xB,0xC,0xE,0xD,0xC,0x10,0xC,0xF,0xC,0xC,0x10,0xE,0xA,0x10,0x10,0xA,0xA,0xC,0xA,0xA,0xD,0xB,0xE,
            0xE,0xC,6,0xA,0xB,0xC,8,7,0xC,0xB,0xC,0xE,9,0xE,0xD,0xE,0xC,0xF,0xB,0xD,0xA,9,0xA,0xA,9,8,9,0xB,0xB,9,8,
            9,0xA,0xA,9,7,9,0xB,0xD,0xB,8,0xA,0xC,8,0xB,9};
        public static int[] g_7x8TRNs = new int[] {8,9,0x11,0xC,0xC,0xF,0xD,0xC,0xD,9,0xA,0xA,9,9,0x10,0xD,0xB,0xE,0xC,0xE,
            0xE,0xD,0xF,0xB,0xD,9,0x12,0xB,0xC,0xC,0xB,0xC,0xD,0xE,8,0xD,0xF,0x11,0xD,0xE,0x12,0xE,0x17,0x17,0x16,
            0x17,0xD,0xE,0x12,0x11,0x13,0xF,0x11,0x14,0x13,0xD,0x14,0x11,0x15,0xD,0xF,0x14,0xD,0x11,0xE,0x12,0x15,
            0x17,0xE,0x12,0x17,0xB,0x14,0x16,0x14,0x15,0x13,0x14,0x18,0xE,0xD,0x15,0x11,0x12,0x11,0xC,0x12,0x10,0x11,
            0x13,0x13,0x12,0x13,0x11,0x16,0xC,0x12,0x15,0x17,0x12,0x13,0x15,0x12,0x16,0x18,0x15,0x15,0x13,0x13,0x14,
            0x15,0x13,0x18,0xD,0x15,0x15,0x17,0x13,0x15,0x16,0x17,0x19,0x15,0x14,0x11,0x17,0x14,0x17,0x11,0xA,0x14,
            0x14,0x11,0x11,0xD,0x11,0xF,0x15,0x13,0x14,0x11,0xD,0xE,0x17,0x17,0x14,0x12,0x12,0x16,0x11,0x11,0x13,0x10,
            0x11,0x12,0x13,0x12,0x14,0x13,0x15,0x14,0x13,0x12,0x10,0x12,0xF,0x17,0x11,0x12,0xF,0x12,0x15,0x13,0x14,0xE,
            0xF,0x13,0x13,0x15,0x14,0xB,0x15,0x15,0x12,0x15,0x11,0x10,0x12,0x10,0x14,0xD,0x13,0x14,0x15,0xF,0xE,0x11,
            0x10,0x15,0x13};
        public static int[] g_7x9TRNs = new int[] {0x12,0xE,0x13,0x13,0x15,0xC,0x16,0x14,0x10,0xD,0x10,0xE,0x12,0x14,0x10,0x11,
            0xB,0xC,0x12,0x14,0x13,0x10,0x12,0xC,0x10,0xE,0xF,0x10,0x11,0x10,0xF,0x10,0xF,0x11,0x14,0xD,0x12,0xF,0x13,
            0xF,0x14,0x14,0x11,0x15,0x16,0x14,0xE,0xE,0x10,0xD,0xE,0xF,0x11,0xD,0xC,0xC,0xF,0xD,0x14,0x13,0x10,0x12,
            0x10,0x10,0x12,0x10,0x11,0xE,0x12,0x15,0x12,0x15,0xF,0x10,0x13,0x10,0x12,0xE,0x10,0xD,0xF,0x11,0x10,0x12,
            0x15,0x11,0x14,0x12,0x11,0x11,0x10,0x13,0xF,0x14,0x11,0xE,0x14,0xF,0x10,0x15,0x13,0x10,0x12,0x12,0x13,0x10,
            0xF,0x10,0xE,0x11,0x12,0x11,0xA,0x10,0x11,0x12,0x12,0x13,0x11,0xD,0xD,0x10,0x14,0x15,0x11,0x11,0x11,0x11,
            0x11,0xF,0x12,0xE,0xD,0xF,0xF,0xE,0x11,0xD,0xD,0xE,0x10,0x11,0xE,0x13,0x12,0x10,0x14,0x11,0x12,0x12,0x12,
            0xF,0x13,0x14,0x11,0x10,0x10,0xF,0xF,0xB,0xA,0x14,0x13,0x13,0x12,0x14,0x14,0x15,0x13,0x17,0x13,0x14,0x12,
            0x13,0x12,0xE,0x14,0x14,0x11,0x15,0x12,0x16,0x16,0x16,0x15,0x15,0x16,0x15,0x16,0x14,0x16,0x13,0x10,0x12,
            0x12,0x13,0x16,0x12,0x18,0x18};

        public static int[][] g_allTrns = new int[][] {
            g_4x2TRNs, g_4x3TRNs, g_4x4TRNs, g_4x5TRNs, g_4x6TRNs,
            g_5x4TRNs, g_5x5TRNs, g_5x6TRNs, g_5x7TRNs, g_5x8TRNs,
            g_6x6TRNs, g_6x7TRNs, g_6x8TRNs, g_6x9TRNs, 
            g_7x7TRNs, g_7x8TRNs, g_7x9TRNs
        };
    }
#endregion
}
