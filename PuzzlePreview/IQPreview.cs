using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace PuzzlePreview
{
    class IQ : IGameInformation
    {
        public IQ()
        {
            byte[] allPuzzleData = File.ReadAllBytes(@"..\..\..\KurushRNG\IQ-GROUP.NEW");
            LoadPuzzleData(allPuzzleData);
        }

        public List<PuzzleSizeDetails> PuzzleInfo
        {
            get;
            set;
        }

        public List<StageWaveInformation> Waves
        {
            get;
            set;
        }

        public bool CheckSquashedScores
        {
            get
            {
                return true;
            }
        }

        private int Rand()
        {
            int s = Seed;
            long mul = s * 0x41C64E6D;
            int loRes = (int)(mul & 0xFFFFFFFF);
            loRes += 0x3039;
            int shRes = loRes >> 16;
            Seed = loRes;
            return shRes & 0x7FFF;
        }

        public int Seed { get; set; }
        public int FrameSeed
        {
            get
            {
                return Seed;
            }
            set
            {
                Seed = value;
            }
        }
        public int GetNextPuzzle(int numSizePuzzles, out bool isFlipped)
        {
            int r = Rand();
            int rDiv20 = r / 200;
            int rShift31 = r >> 31;
            int nextVal = rDiv20 - rShift31;
            nextVal *= 200;
            nextVal = r - nextVal;
            int currentPuzzle = nextVal & 0xff;
            isFlipped = ((Rand() % 100) < 30);
            return currentPuzzle;
        }

        private PuzzleSizeDetails MakePuzzleSizeDetails(int width, int height, byte[] puzzleData, int[] trns)
        {
            List<byte[]> puzzlesOfThisSize = new List<byte[]>(200);
            PuzzleSizeDetails sizeDets = new PuzzleSizeDetails();
            sizeDets.height = height;
            sizeDets.width = width;
            sizeDets.trns = trns;
            int puzzleBytes = width * height;
            for (int i = 0; i < 200; ++i)
            {
                int thisPuzzleBase = 70 * i;
                byte[] thisPuzzle = new byte[puzzleBytes];
                for (int j = 0; j < height; ++j)
                {
                    int thisRowPosition = j * 7;
                    Array.Copy(puzzleData, thisPuzzleBase + thisRowPosition, thisPuzzle, j * width, width);
                }
                puzzlesOfThisSize.Add(thisPuzzle);
            }
            sizeDets.puzzles = puzzlesOfThisSize;
            return sizeDets;
        }

        private void LoadPuzzleData(byte[] puzzles)
        {
            List<PuzzleSizeDetails> details = new List<PuzzleSizeDetails>(15);
            List<StageWaveInformation> waves = new List<StageWaveInformation>();
            // 70 bytes between puzzles
            // 200 puzzles per size
            // 14,000 bytes between puzzle sizes
            byte[] puzzleBuffer = new byte[14000];
            Array.Copy(puzzles, 14000 * 0, puzzleBuffer, 0, 14000);
            PuzzleSizeDetails puzzleSizes = MakePuzzleSizeDetails(4, 2, puzzleBuffer, TRNs.g_4x2TRNs);
            StageWaveInformation wave = new StageWaveInformation(3, puzzleSizes);
            details.Add(puzzleSizes);
            waves.Add(wave); // stage 1 - first two waves
            waves.Add(wave);
            Array.Copy(puzzles, 14000 * 1, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(4, 3, puzzleBuffer, TRNs.g_4x3TRNs);
            wave = new StageWaveInformation(3, puzzleSizes);
            waves.Add(wave); // tage 1 wave 3
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 2, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(4, 4, puzzleBuffer, TRNs.g_4x4TRNs);
            wave = new StageWaveInformation(3, puzzleSizes);
            waves.Add(wave); // stage 1 wave four
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 3, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(4, 5, puzzleBuffer, TRNs.g_4x5TRNs);
            wave = new StageWaveInformation(3, puzzleSizes);
            waves.Add(wave); // stage 2 - first two waves
            waves.Add(wave);
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 4, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(4, 6, puzzleBuffer, TRNs.g_4x6TRNs);
            wave = new StageWaveInformation(3, puzzleSizes);
            waves.Add(wave); // stage 2 - last two waves
            waves.Add(wave);
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 5, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(5, 4, puzzleBuffer, TRNs.g_5x4TRNs);
            wave = new StageWaveInformation(3, puzzleSizes);
            waves.Add(wave); // stage 3 - first wave
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 6, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(5, 5, puzzleBuffer, TRNs.g_5x5TRNs);
            wave = new StageWaveInformation(3, puzzleSizes);
            waves.Add(wave); // stage 3 - second wave
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 7, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(5, 6, puzzleBuffer, TRNs.g_5x6TRNs);
            wave = new StageWaveInformation(3, puzzleSizes);
            waves.Add(wave); // stage 3 - last two waves
            waves.Add(wave);
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 8, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(5, 7, puzzleBuffer, TRNs.g_5x7TRNs);
            wave = new StageWaveInformation(2, puzzleSizes);
            waves.Add(wave); // stage 4 - first two waves
            waves.Add(wave);
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 9, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(5, 8, puzzleBuffer, TRNs.g_5x8TRNs);
            wave = new StageWaveInformation(2, puzzleSizes);
            waves.Add(wave); // stage 4 - last two waves
            waves.Add(wave);
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 10, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(6, 6, puzzleBuffer, TRNs.g_6x6TRNs);
            wave = new StageWaveInformation(3, puzzleSizes);
            waves.Add(wave); // stage 5 - first two waves
            waves.Add(wave);
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 11, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(6, 7, puzzleBuffer, TRNs.g_6x7TRNs);
            wave = new StageWaveInformation(3, puzzleSizes);
            waves.Add(wave); // stage 5 - last two waves
            waves.Add(wave);
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 12, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(6, 8, puzzleBuffer, TRNs.g_6x8TRNs);
            wave = new StageWaveInformation(2, puzzleSizes);
            waves.Add(wave); // stage 6 - first two waves
            waves.Add(wave);
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 13, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(6, 9, puzzleBuffer, TRNs.g_6x9TRNs);
            wave = new StageWaveInformation(2, puzzleSizes);
            waves.Add(wave); // stage 6 - last two waves
            waves.Add(wave);
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 14, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(7, 7, puzzleBuffer, TRNs.g_7x7TRNs);
            wave = new StageWaveInformation(3, puzzleSizes);
            waves.Add(wave); // stage 7 - first two waves
            waves.Add(wave);
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 15, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(7, 8, puzzleBuffer, TRNs.g_7x8TRNs);
            wave = new StageWaveInformation(3, puzzleSizes);
            waves.Add(wave); // stage 7 - last two waves
            waves.Add(wave);
            wave = new StageWaveInformation(2, puzzleSizes);
            waves.Add(wave); // stage 8 - first two waves
            waves.Add(wave);
            details.Add(puzzleSizes);
            Array.Copy(puzzles, 14000 * 16, puzzleBuffer, 0, 14000);
            puzzleSizes = MakePuzzleSizeDetails(7, 9, puzzleBuffer, TRNs.g_7x9TRNs);
            wave = new StageWaveInformation(2, puzzleSizes);
            waves.Add(wave); // stage 8 - last two waves
            waves.Add(wave);
            wave = new StageWaveInformation(1, puzzleSizes);
            waves.Add(wave); // final stage, all four waves
            waves.Add(wave);
            waves.Add(wave);
            waves.Add(wave);
            details.Add(puzzleSizes);
            PuzzleInfo = details;
            Waves = waves;
        }
    }

#region TRNs
    static class TRNs
    {
        public static int[] g_4x2TRNs = new int[] {4,3,2,2,2,3,2,2,2,2,2,2,2,3,2,2,4,2,2,2,3,2,1,2,1,1,3,
            2,5,5,2,1,4,2,1,1,3,2,2,2,1,3,4,2,1,1,8,1,1,2,3,3,3,3,3,1,1,1,2,2,3,3,1,2,3,1,2,2,1,1,
            1,2,3,1,1,2,1,1,2,4,1,3,1,3,5,1,1,2,1,1,1,1,2,3,5,4,2,1,3,3,4,2,5,5,1,1,1,3,3,2,1,2,2,
            3,1,2,2,2,3,2,4,2,2,1,1,3,1,2,1,4,2,3,1,5,3,2,2,1,3,1,1,2,2,2,3,1,2,1,1,4,1,3,1,2,1,3,
            2,1,1,2,1,2,1,2,2,3,2,5,2,2,2,1,2,2,3,2,4,3,3,1,5,1,3,2,1,1,1,2,1,2,1,1,3,1,2,2,1,3,2,3};
        public static int[] g_4x3TRNs = new int[] {3,3,3,2,1,2,3,3,3,4,3,2,3,1,3,5,3,5,5,2,1,4,2,5,1,2,2,
            5,4,4,2,3,3,3,3,5,1,3,1,2,2,2,3,2,2,3,1,4,1,2,2,2,4,3,3,3,6,3,2,3,4,1,3,3,6,6,3,3,3,5,
            2,3,2,2,2,1,6,2,2,3,2,4,3,4,5,2,3,3,3,3,2,4,3,3,3,2,3,2,2,4,3,5,6,2,2,3,3,4,2,3,4,2,3,
            4,2,4,2,5,2,1,2,3,3,4,3,2,1,2,2,1,2,3,2,5,4,4,1,3,2,2,2,2,2,1,1,1,3,3,3,2,4,4,3,3,2,5,
            4,3,2,2,4,3,3,2,4,6,2,3,4,4,5,4,2,3,2,2,3,2,4,2,3,2,1,4,3,2,2,3,3,3,2,2,2,2,3,1,2,2,4,2};
        public static int[] g_4x4TRNs = new int[] {1,4,2,2,3,5,1,4,5,5,3,7,3,2,4,3,3,2,3,2,4,4,4,3,3,3,3,
            5,6,3,4,3,3,4,3,3,5,4,3,5,4,5,3,3,2,4,6,4,3,3,3,3,1,2,5,4,3,2,3,4,3,4,4,4,4,3,4,4,3,3,
            3,4,5,3,5,3,5,4,2,3,3,3,4,4,4,3,5,3,2,2,2,3,5,2,3,3,3,2,4,4,5,2,2,3,3,3,3,2,4,2,5,3,4,
            2,2,2,3,2,3,4,4,5,2,3,2,3,2,6,4,2,2,3,2,4,3,3,2,5,2,4,4,3,4,6,4,2,2,5,2,2,3,3,3,3,3,3,
            3,3,6,5,4,2,4,3,2,3,2,2,3,2,5,5,4,2,4,3,5,2,4,2,6,3,4,8,6,5,3,3,2,2,2,5,4,6,4,2,3,4,8,3};
        public static int[] g_4x5TRNs = new int[] {5,4,6,4,6,4,7,6,7,7,5,6,5,5,6,8,5,5,6,3,6,5,7,5,5,4,5,
            6,5,4,5,6,5,4,4,6,5,6,4,3,4,6,8,5,6,4,5,4,8,4,3,7,6,6,6,6,6,6,6,5,7,5,6,4,5,6,4,6,5,5,
            5,3,6,5,4,7,6,7,7,7,8,7,7,6,5,6,5,3,4,7,7,4,5,5,6,6,4,6,6,6,5,6,5,8,6,6,6,3,6,8,5,7,5,
            5,5,6,5,7,6,5,6,6,4,7,6,4,5,4,6,8,6,5,5,8,7,8,4,6,5,4,7,5,5,5,5,4,6,5,5,4,5,7,5,6,6,3,
            4,4,7,6,8,4,5,6,4,5,4,3,4,6,4,5,4,5,5,6,5,4,6,4,7,6,5,5,5,4,4,5,5,7,5,5,7,7,5,5,4,4,5,5};
        public static int[] g_4x6TRNs = new int[] {6,7,8,5,9,5,4,3,5,6,7,8,7,4,7,6,4,7,7,7,6,7,8,9,5,0xA,7,
            8,6,0xA,6,7,5,0xA,7,9,9,8,6,7,8,8,6,5,9,8,9,0xA,0xD,0xC,8,5,9,8,0xA,7,7,0xA,8,7,9,7,7,0xA,
            6,0xA,7,8,6,6,8,6,7,6,5,0xA,8,6,8,6,7,9,9,8,6,7,9,8,9,4,5,6,0xC,7,8,7,0xA,7,7,7,8,4,8,5,8,
            7,0xB,9,8,7,7,6,5,7,6,6,9,6,7,6,6,6,9,9,9,7,5,5,7,7,8,9,0xB,7,5,8,8,7,5,4,7,7,8,8,6,9,9,8,
            0xC,0xB,7,9,0xA,0xA,0xA,7,5,8,8,7,7,7,8,0xA,0xA,9,0xB,8,0xA,8,7,8,7,7,8,8,7,9,8,9,7,5,6,8,
            7,6,8,8,9,0xA,7,7,8,5,0xB,6,5,7,8,7};
        public static int[] g_5x4TRNs = new int[] {3,4,5,7,4,7,7,6,6,4,7,6,7,6,7,7,6,6,5,8,7,7,7,6,6,6,4,8,
            6,6,7,5,7,7,6,6,7,6,8,6,6,5,5,0xB,7,8,0xB,6,7,8,6,6,7,6,5,6,6,8,7,5,8,7,4,5,5,6,9,5,6,6,
            5,8,9,8,3,9,7,8,5,0xA,5,8,7,8,8,7,0xA,7,8,8,7,5,8,5,7,6,6,7,4,5,6,4,7,4,7,9,5,6,5,6,4,4,
            8,6,7,6,7,0xA,7,4,7,4,8,7,7,7,4,0xA,7,5,3,7,4,5,8,5,4,8,6,5,4,5,6,8,6,4,6,7,4,5,6,4,7,4,
            6,6,9,6,6,7,6,7,9,4,7,7,7,5,4,5,6,0xA,9,7,7,9,5,5,4,5,7,9,5,9,0xF,7,5,7,9,7,5,7,6,5,7,5,
            7,6,4,5};
        public static int[] g_5x5TRNs = new int[] {1,0xC,8,7,9,8,4,0xA,6,6,6,6,0xE,5,8,7,5,6,5,0xB,5,9,8,7,
            7,9,6,7,4,6,4,8,9,5,9,7,9,9,6,0xB,7,5,5,5,7,6,7,9,6,9,5,7,7,6,8,7,7,8,9,8,8,8,9,8,7,6,6,
            7,0xB,0xB,8,7,0xA,6,0xB,6,7,7,0xA,7,7,0xA,0xB,8,7,5,0xA,8,6,7,4,6,7,6,6,6,8,9,8,7,8,6,6,
            0xC,5,0xB,0xA,8,0xB,6,8,7,0xA,9,8,9,8,8,9,5,9,0xB,8,9,6,0xA,0xB,0xA,7,8,4,6,0xC,8,8,9,7,
            9,8,8,0xB,8,5,6,9,8,0xA,0xA,9,0xA,0xA,7,8,9,8,5,0xA,7,4,0xA,5,7,0xC,9,3,0xA,7,4,3,7,7,8,
            0xA,6,8,5,9,5,6,6,8,8,5,7,6,4,7,6,8,3,4,7,5,5,6,4,6,4,4,4};
        public static int[] g_5x6TRNs = new int[] {1,8,9,5,7,7,7,6,8,8,8,0xA,8,7,6,9,6,6,5,8,9,7,9,6,6,8,5,
            6,5,5,8,6,8,0xA,5,8,5,8,9,7,9,5,7,6,8,6,7,7,6,9,8,0xA,0xA,7,9,0xA,8,7,7,7,0xA,6,9,8,4,7,
            5,5,9,7,5,7,5,6,9,5,8,7,8,7,6,0xA,8,8,9,8,7,9,8,5,6,6,0xC,9,7,6,8,7,7,9,8,8,7,9,8,6,7,7,
            0xA,9,9,6,6,6,8,8,7,6,8,6,9,8,8,0xA,9,9,5,8,7,5,0xA,0xB,0xA,7,7,6,7,5,0xA,7,9,4,0xA,8,6,
            8,8,7,8,6,8,9,7,9,8,8,7,7,9,0xB,7,8,7,9,7,8,7,9,8,8,6,8,8,9,8,8,7,0xA,8,9,7,6,0xA,0xB,8,
            8,0xB,0xA,6,7,7,9,0xA,8,7,5,7,7,7,7};
        public static int[] g_5x7TRNs = new int[] {1,0xA,0xD,0xB,0xC,0xD,0xB,0xB,8,0xA,0xA,0xB,0xB,8,0xB,6,
            9,9,9,6,6,7,0xA,9,8,7,8,8,0xB,0xA,5,0xD,0xB,8,0xA,0xC,8,0xA,7,8,6,5,6,7,0xD,8,6,8,9,7,0xA,
            6,8,0xA,0xB,7,7,0xB,0xB,0xA,6,8,0xB,0xB,0xB,9,9,9,7,9,8,0xE,9,0xC,0xB,0xA,0xB,8,9,9,8,0xB,
            9,0xE,0xA,0xE,0xF,0xA,9,7,8,8,0xA,8,0xA,7,5,9,0xA,0xB,0xA,0xC,0xC,0xE,0xC,8,7,8,0xC,5,0xA,
            0xE,0xA,0xB,9,0xB,0xC,0xB,0xB,0xF,0xA,9,0xD,0xB,0xD,0xC,0xC,0xA,0xD,0xA,0xA,0xA,0xB,0xD,0xD,
            0x10,0xB,0xC,0xE,7,9,0xE,9,8,0xB,0xA,0x12,0xB,8,0xB,9,0xC,0x10,0xA,0xA,0xE,0xB,0xA,0xB,0xA,
            0xA,0xC,0xB,0xB,0xA,0xB,7,0xA,0xB,0xB,9,0xE,0xE,8,0xD,0xA,0xC,0xB,0xA,0xC,8,0xA,0xA,7,4,0xC,
            0xC,0xA,0xB,0xD,8,0xA,9,0xA,0xB,0xC,0xC,9,0x11,0xC};
        public static int[] g_5x8TRNs = new int[] {1,0xB,0xB,0xD,9,0xB,7,0xC,0xB,0xA,9,0xC,7,0xA,0xB,0xB,0xA,0xB,
            0xA,9,0xD,7,8,0xA,0xA,0xA,8,9,0xF,8,9,0xA,0xA,0xA,0xB,0xB,0xB,7,7,0xA,0xB,0xC,0xD,0xE,0xA,9,0xA,
            0xC,0xC,0xE,0xC,0xB,0xE,7,0xB,8,6,9,6,9,0xC,0xD,6,0xB,0xA,0xB,0xB,7,7,0xD,0xD,0xB,0xB,7,0xA,0xA,
            0xB,8,7,0xD,0xC,0xA,0xA,7,8,0xC,9,9,9,9,0xC,0xA,9,8,0xC,8,0xD,0xB,0xC,0xA,8,0xB,0xD,0xD,9,0xE,0xA,
            9,0xE,0xD,0xE,0xB,0xB,0xC,0xA,0xB,0xB,0xA,7,9,0xA,0xC,0xD,0xA,0xA,0xA,0xC,0xB,0xD,0xA,0xE,0xE,0xD,
            0xC,0xA,0xC,8,9,0xA,0xE,7,0xB,0xB,0xC,0xD,8,0xC,0xD,0xA,0xC,0x11,0xA,0xA,0x12,0xC,0xD,9,0x11,0xD,
            0xD,0xA,0x11,0x12,0xC,0xB,0xC,0xB,0xC,0xA,0xB,0xB,0xD,0xA,0xA,0xE,0xB,0x12,0xD,0xD,9,0xD,0xD,0xA,
            0xB,8,0xE,9,0xB,0xE,0x10,0x11,0xB,7,7,0xB,9,0xC,8,9,0xA};
        public static int[] g_6x6TRNs = new int[] {0xB,0xA,8,8,0xB,8,0xA,0xA,0xA,8,8,9,6,7,0xB,7,9,9,8,0xE,6,0xA,0xA,
            0xB,8,0xA,8,6,0xA,9,6,5,5,7,0xB,0xA,0xA,0xA,7,0xD,0xA,0xB,0xA,0xA,9,0xD,6,9,0xB,0xA,8,8,9,6,8,9,
            0xC,9,0xA,0xB,0xB,9,9,5,9,9,9,8,0xB,8,8,0xA,9,0xA,0xB,0xE,7,0xD,8,0x10,7,7,0xC,8,8,9,9,8,0xF,0xD,
            0xB,0xA,9,8,7,8,9,0xC,0xA,0xD,0xB,0xC,0xB,0xB,0xC,0xA,0xC,7,5,8,0xB,0xB,9,0xE,0xA,0xC,8,0xB,9,0xC,
            6,0xD,0xC,0xD,8,7,0xB,0xA,9,7,9,0xD,9,0xA,0xD,0xE,0xC,0xB,7,8,0xA,0xD,0xC,0xD,9,7,0xA,8,9,6,8,8,8,
            0xB,0xC,9,7,9,7,6,0xC,9,8,6,0xA,0xB,9,9,0xB,0xC,0xD,0xB,0xC,8,0xD,0xC,0xA,0xB,0xA,0xB,0xE,8,7,8,0xE,
            0xD,0xA,0xD,0xA,0xD,6,0xA,9,0xC,0xC,0xF,0xE,0xA,0xC,0xD};
        public static int[] g_6x7TRNs = new int[] {0xD,0xF,9,0xA,0xA,9,9,0xB,7,0xC,9,0xA,0xD,0xA,0xC,7,9,0xD,0xE,0xD,9,
            0xC,8,0xC,9,9,9,0xB,0xC,9,0xC,0xC,0xA,0xE,0xB,0xC,0xB,0xB,0xA,6,8,9,0xA,0xB,0xF,0xB,0xE,0xE,0xA,7,0xD,
            0xC,9,0xA,0xD,0xA,0xD,9,7,0xB,0xD,9,0xB,0xA,0xB,8,9,0xA,6,9,0xA,9,7,8,0xA,9,8,9,8,0xB,9,0xE,0xA,8,9,
            0xA,0xE,0xE,7,0xA,0xB,0xB,0xB,0xB,0xC,0xA,0xA,0xB,0xD,9,8,0xB,0xC,0xC,0xE,0xB,0xB,0xA,0xD,0xC,9,0xC,
            0xB,0xE,8,9,0xD,9,9,8,9,8,8,0xE,0xE,7,8,8,7,9,0xE,0xC,9,0xA,6,0xD,0xB,9,0xE,0xB,0xA,0xB,0xA,0xA,0xC,
            0xD,0xB,0xC,0xE,9,0xA,9,9,0xB,8,0xB,0xC,0xE,0xA,9,0xB,9,0xA,0xD,0xA,0xE,0xB,0xB,0xA,0xA,0xC,0xA,9,0xE,
            0xA,8,9,0xA,0xC,0xB,0xB,9,6,0xC,9,0xE,0xB,0xB,0xA,0xC,0xE,0x11,0xA,9,0xD,0xA,0xA,0xF,0x11,0xD};
        public static int[] g_6x8TRNs = new int[] {0xB,0xC,0xD,0xA,0xA,0xC,0xD,0xC,0xF,0xC,0xE,0xB,0xC,0xA,0x12,0xE,6,0xB,
            0x11,0x11,0x11,0xD,0xE,0xE,0x13,0xF,0xD,0x12,0xA,0x11,3,0xA,0xC,0xF,9,0xC,0xC,0xA,0xF,0xC,0xD,0xB,0xF,
            0xB,0xE,0xC,9,9,0xC,8,8,8,7,0xA,0xB,0xA,9,0xA,0xD,0xF,0xC,0xB,0xC,0xF,0xD,0x14,0xE,0xD,0x14,0xF,0x13,
            0xC,0xB,0xD,0xA,0xA,0xB,0x10,0x10,0xC,0xC,0x12,0xA,0xB,0xC,0xF,0xC,0x10,0xD,0xD,0xF,0xE,0xB,0x10,0x14,
            0x10,0xE,0xE,0x10,0xD,0xE,0xD,0xA,0xC,0xE,0x10,0xA,0xB,0xD,0xF,0xD,0xD,0xF,0xC,0x12,0xF,0xC,0xC,0xF,0xD,
            0xF,0xA,8,0xC,0x11,0xE,0x11,0xE,0xE,0x10,0xE,0xE,0x13,0xE,0xF,0x14,0xC,0xB,0xB,0xD,0xE,0xE,0xB,9,0xE,
            0xC,0xE,0x10,0xE,0xF,0x10,0xB,0x10,0xB,0xD,0xD,0x10,0xD,0xB,0x11,0xD,0xD,9,0xF,0xB,0xC,9,0xD,0xF,0xD,
            0x10,0xD,0xD,9,0xF,0xE,0x11,0xA,0x12,0xF,0x10,0xE,0x10,0xE,0x10,0xE,0xE,0xE,0xE,0xC,0x10,0xF,0xD,0x15,
            0x14,0xF,9,0x11,0x12,0xD};
        public static int[] g_6x9TRNs = new int[] {0xD,9,0xD,0xB,0x10,0xD,0xE,0xC,0xA,0xA,0xB,0xA,0xC,0xB,0xD,0xC,0xC,0xB,
            0xD,0xD,0xA,0xC,0xC,0x12,0xA,0xB,0xE,0xA,8,0xF,0xF,0xB,0x11,8,0xD,0xA,0xD,0xC,0x11,0xD,0xA,0xA,0x10,0x11
            ,0xA,0xA,0xA,0xD,0xB,0xE,8,0x10,0xD,0x11,0x10,0xC,0xC,0xB,0xC,0xF,0x10,0x10,0xE,0xC,0xC,0xB,0xB,0xB,0xE,
            0xE,0xA,0xF,9,0xD,0xA,0xF,0xF,0xF,0xE,0xB,0xA,7,0xC,0xB,0xF,0xE,0xD,0x11,0xE,0x10,0xF,0xD,0xD,0x10,0xF,
            0x10,0x13,0xE,9,0xB,0xA,9,0xE,0xC,0xA,0xF,0x11,0xF,0xA,0xE,0x10,0x11,0x12,0xC,0xD,0xC,0xB,0xB,0xC,0x14,
            0x13,9,0xD,0x10,0xA,7,9,0xC,0xF,7,8,0x11,0xC,0x13,0xB,0xB,0xC,0xD,0xC,0x13,0x11,0xD,0x12,0xD,0xF,8,0xD,
            0xE,0xB,0xC,0x10,0x12,0x15,0xC,0xD,0xF,0xD,0xA,0x11,0xE,0x11,0xC,0x10,0xD,0xD,0xD,0xB,0xB,0xD,0x11,0xD,
            0xD,0xB,0xD,0xD,0x10,0xD,0x10,0xC,0xC,0xE,0xA,0xD,0x12,0xF,8,0xD,0xE,0xB,0xD,0x12,0x11,0xA,0xC,0xF,0x11,
            0xC,0x15,0xD,0xC};
        public static int[] g_7x7TRNs = new int[] {0x10,0xA,6,0xC,0xC,0xE,0xB,0xB,0xA,0xD,0xE,0xB,0xD,0xB,0xC,0xC,0xD,9,0xA,
            0xB,0xC,0xC,8,0xD,8,8,0xA,3,0xA,0xE,9,0xB,0xC,0xD,0xA,0xE,8,0xB,0xF,0xC,0xA,9,0xE,0xB,0xB,0xF,0xD,7,0xD,
            0xC,0xC,0xC,0xF,0xE,0xC,0xC,9,0xE,0xA,9,0xA,0xC,0xE,0xD,0xF,0xC,0xD,0xC,0xE,0xD,0xB,0xD,0xB,0xD,0xD,0xD,
            9,0xD,0xB,0xE,0xC,0xA,0xD,0xA,0xD,0xC,0xF,0xA,0xB,0xC,0x10,0xB,8,0xB,0xC,0xB,0xA,0xE,0xE,0xD,0xE,0xE,0xC,
            0xD,0xB,0xF,0xC,0xF,0xE,0xC,0xB,0xB,0xD,0xA,0xB,0x10,0xD,0xF,0xC,0xD,0x10,0xE,0xD,0xD,6,0xF,0xE,0xD,0xC,
            0xC,0xD,0xB,0xC,0xE,0xD,0xC,0x10,0xC,0xF,0xC,0xC,0x10,0xE,0xA,0x10,0x10,0xA,0xA,0xC,0xA,0xA,0xD,0xB,0xE,
            0xE,0xC,6,0xA,0xB,0xC,8,7,0xC,0xB,0xC,0xE,9,0xE,0xD,0xE,0xC,0xF,0xB,0xD,0xA,9,0xA,0xA,9,8,9,0xB,0xB,9,8,
            9,0xA,0xA,9,7,9,0xB,0xD,0xB,8,0xA,0xC,8,0xB,9};
        public static int[] g_7x8TRNs = new int[] {8,9,0x11,0xC,0xC,0xF,0xD,0xC,0xD,9,0xA,0xA,9,9,0x10,0xD,0xB,0xE,0xC,0xE,
            0xE,0xD,0xF,0xB,0xD,9,0x12,0xB,0xC,0xC,0xB,0xC,0xD,0xE,8,0xD,0xF,0x11,0xD,0xE,0x12,0xE,0x17,0x17,0x16,
            0x17,0xD,0xE,0x12,0x11,0x13,0xF,0x11,0x14,0x13,0xD,0x14,0x11,0x15,0xD,0xF,0x14,0xD,0x11,0xE,0x12,0x15,
            0x17,0xE,0x12,0x17,0xB,0x14,0x16,0x14,0x15,0x13,0x14,0x18,0xE,0xD,0x15,0x11,0x12,0x11,0xC,0x12,0x10,0x11,
            0x13,0x13,0x12,0x13,0x11,0x16,0xC,0x12,0x15,0x17,0x12,0x13,0x15,0x12,0x16,0x18,0x15,0x15,0x13,0x13,0x14,
            0x15,0x13,0x18,0xD,0x15,0x15,0x17,0x13,0x15,0x16,0x17,0x19,0x15,0x14,0x11,0x17,0x14,0x17,0x11,0xA,0x14,
            0x14,0x11,0x11,0xD,0x11,0xF,0x15,0x13,0x14,0x11,0xD,0xE,0x17,0x17,0x14,0x12,0x12,0x16,0x11,0x11,0x13,0x10,
            0x11,0x12,0x13,0x12,0x14,0x13,0x15,0x14,0x13,0x12,0x10,0x12,0xF,0x17,0x11,0x12,0xF,0x12,0x15,0x13,0x14,0xE,
            0xF,0x13,0x13,0x15,0x14,0xB,0x15,0x15,0x12,0x15,0x11,0x10,0x12,0x10,0x14,0xD,0x13,0x14,0x15,0xF,0xE,0x11,
            0x10,0x15,0x13};
        public static int[] g_7x9TRNs = new int[] {0x12,0xE,0x13,0x13,0x15,0xC,0x16,0x14,0x10,0xD,0x10,0xE,0x12,0x14,0x10,0x11,
            0xB,0xC,0x12,0x14,0x13,0x10,0x12,0xC,0x10,0xE,0xF,0x10,0x11,0x10,0xF,0x10,0xF,0x11,0x14,0xD,0x12,0xF,0x13,
            0xF,0x14,0x14,0x11,0x15,0x16,0x14,0xE,0xE,0x10,0xD,0xE,0xF,0x11,0xD,0xC,0xC,0xF,0xD,0x14,0x13,0x10,0x12,
            0x10,0x10,0x12,0x10,0x11,0xE,0x12,0x15,0x12,0x15,0xF,0x10,0x13,0x10,0x12,0xE,0x10,0xD,0xF,0x11,0x10,0x12,
            0x15,0x11,0x14,0x12,0x11,0x11,0x10,0x13,0xF,0x14,0x11,0xE,0x14,0xF,0x10,0x15,0x13,0x10,0x12,0x12,0x13,0x10,
            0xF,0x10,0xE,0x11,0x12,0x11,0xA,0x10,0x11,0x12,0x12,0x13,0x11,0xD,0xD,0x10,0x14,0x15,0x11,0x11,0x11,0x11,
            0x11,0xF,0x12,0xE,0xD,0xF,0xF,0xE,0x11,0xD,0xD,0xE,0x10,0x11,0xE,0x13,0x12,0x10,0x14,0x11,0x12,0x12,0x12,
            0xF,0x13,0x14,0x11,0x10,0x10,0xF,0xF,0xB,0xA,0x14,0x13,0x13,0x12,0x14,0x14,0x15,0x13,0x17,0x13,0x14,0x12,
            0x13,0x12,0xE,0x14,0x14,0x11,0x15,0x12,0x16,0x16,0x16,0x15,0x15,0x16,0x15,0x16,0x14,0x16,0x13,0x10,0x12,
            0x12,0x13,0x16,0x12,0x18,0x18};

        public static int[][] g_allTrns = new int[][] {
            g_4x2TRNs, g_4x3TRNs, g_4x4TRNs, g_4x5TRNs, g_4x6TRNs,
            g_5x4TRNs, g_5x5TRNs, g_5x6TRNs, g_5x7TRNs, g_5x8TRNs,
            g_6x6TRNs, g_6x7TRNs, g_6x8TRNs, g_6x9TRNs, 
            g_7x7TRNs, g_7x8TRNs, g_7x9TRNs
        };
    }
    #endregion
}
